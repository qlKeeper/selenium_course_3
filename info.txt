Selenium- это программная библиотека для управления браузерами

Webdriver - самая важная сущность, ответственная за управление браузером.

Webelement - вторая важная сущность, представляющая собой абстракцию над 
веб-элементом (кнопки, ссылки, поля ввода и др.)

By - класс, содержащий статические методы для идентификации элементов
---------------------------------------------------------------------------

Установка: pip install selenium
Импорт:
from selenium import webdriver
---------------------------------------------------------------------------

Локаторы мы используем с помощью двух универсальных методов find_element() и 
find_elements() который возвращаем список найденных элементов
Перед использованием локатора нам необходимо его импортировать:
from selenium.webdriver.common.by import By
-----------------------------------------------------------------------------

Поиск по #id
Поиск по .class
Поиск по имени тега <a>
Поиск по значению атрибута [name="4_1"]

.author .text - это означает что мы ищем class c значением атрибута author, 
а пробел указывает что нужно искать внутри этого тега, тег с классом "text"
.img_box>.name_item - такой способ помогает найти дочерний элемент от его родителя
Поиск по порядковому номеру дочернего элемента: #description > li:nth-child(3)
.main.author - такой составной селектор используется до поиска элемента с двойным классом
---------------------------------------------------------------------------

Когда мы не можем найти уникальный селектор для необходимого нам элемента, 
на помощь приходит поиск по XPath, поиск атрибута по его пути.
XPath - очень мощный и гибкий инструмент, в то же время и очень опасный. 
1. XPath всегда начинается с символа / или //
Символ / аналогичен символу > в CSS-селекторе, а символ // — пробелу.
Пример: /html/body/header, //header
2. Символ [ ] - Это команда фильтрации
По любому атрибуту: //a[@id='a_back']
По порядковому номеру: //ul/li[5]
По полному совпадению текста: //button[text()="Купить"]
По частичному совпадению текста или атрибута: //li[contains(@id, "material")]
3. Символ * - Команда выбора всех элементов
//div/*[@class="price"]
-----------------------------------------------------------------------------

Следует закрывать окно командой .quit()
чтобы гарантированно код завершил свою работу командой  browser.quit(), 
мы будем использовать конструкцию  try/finally
Третий способ это менеджер контекста with/as

Некоторые проблемы WebDriver
Поведение Selenium может отличаться в разных браузерах;
Иногда возникают сложности с поиском элементов (XPath и другие методы иногда просто не работают);
Необъяснимые падения драйвера прямо посреди работы скрипта;
Взаимодействие возможно только с активной вкладкой браузера, 
драйвер позволяет открывать новые вкладки и новые окна, но не позволяет одновременно в них работать.
-------------------------------------------------------------------------------

.find_element() - Возвращает первый найденный элемент соответствующий нашим критериям поиска
.find_elements() - Возвращает все найденные элементы, 
соответствующие критериям поиска и сохраняет результат в список <class 'list'>
Как всё таки быть, если нам нужен каждый второй или третий элемент на странице ?
.find_element(By.XPATH, "//div[@class='text']/p[2]") - вернёт нам второй элемент <p>, 
первого найденного элемента <div class="text">.
-----------------------------------------------------------------------------

Когда вам необходимо получить значение атрибута. 
Вы можете использовать метод .get_attribute('attribute'), 
Где attribute - это имя требуемого вам атрибута. 